geom_label(
label="99.9%",
x = n_breedings_interval[2],
y=99.9,
color="red"
) +
geom_label( #"custom confidence"
label=paste0("Confidence ", breedingObj$confidence_p*100, "%"),
x=n_breedings_interval[length(n_breedings_interval)-2],
y=breedingObj$confidence_p*100,
color="blue"
) +
# geom_text( # "Recommended"
#     aes(label=recommended),
#     hjust=-0.1,
#     vjust=0,
#     col="darkviolet"
# ) +
geom_text( # breeding values
color=dplyr::case_when(
dd$recommended=="Recommended" ~ "black",
dd$recommended!="Recommended" ~ "black"),
aes(label=n_breedings_interval),
hjust=+1.25,
vjust=-0.5,
size = 3.5) + ggtitle(paste0("20 +/+ ",breOb$strain, " pups"))
}
plot_confedence_drop(breOb)
generate_data4plot <- function(breedingObj){
kk = breedingObj$required_breedings
if(kk<50){
n_breedings_interval <- seq(
max(2,kk-10),
kk+15
)
}
if(kk>= 50 & kk < 100){
n_breedings_interval <- seq(
max(2,kk-20),
kk+25,
2)
}
if(kk>= 100 & kk < 200){
n_breedings_interval <- seq(
max(2,kk-20),
kk+40,
3)
}
if(kk>= 200 & kk < 300){
n_breedings_interval <- seq(
max(2,kk-30),
kk+50,
5)
}
if(kk>= 300){
n_breedings_interval <- seq(
max(2,kk-30),
kk+70,
10)
}
confi_values <- sapply(
n_breedings_interval,
FUN=function(n_breedings){
confi <- calculate_confi(
k=n_breedings,
doof1=breedingObj$doof1,
genotypes_N=breedingObj$genotypes_N,
genotypes_p=breedingObj$genotypes_p)
}
)
if(length(confi_values) > 50){
interesting_ids <- which(confi_values < 0.999 & confi_values > 0.3)
n_breedings_interval <- n_breedings_interval[interesting_ids]
confi_values <- confi_values[interesting_ids]
}
recommended <- ifelse(
n_breedings_interval==breedingObj$required_breedings,
"Recommended",
"")
if(length(confi_values) >= 5){
# delta x_i = x_(i+1) - x_i
fist_confi_derivative <- confi_values[-1] - confi_values[-length(confi_values)]
# delta delta x_i = x_(i+1) - x_(i-1)  ! like this here!
second_confi_derivative <- fist_confi_derivative[-1] -
fist_confi_derivative[-length(fist_confi_derivative)]
third_derivative <- second_confi_derivative[-1] -
second_confi_derivative[-length(second_confi_derivative)]
# data to plot
dd <- data.frame(
n_breedings_interval,
confi_values,
d_confi = c(fist_confi_derivative, NA),
dd_confi = c(second_confi_derivative, NA, NA),
ddd_confi <- c(NA, third_derivative, NA, NA),
recommended)
}else{
dd <- data.frame(
n_breedings_interval,
confi_values,
d_confi = rep(NA, length(n_breedings_interval)),
dd_confi = rep(NA, length(n_breedings_interval)),
ddd_confi <- rep(NA, length(n_breedings_interval)),
recommended)
}
return(dd)
}
calc_green_blue_poins <- function(dd){
if(all(is.na(dd$ddd_confi)))
return(c(NA,NA))
ddd_confi = dd$ddd_confi[!is.na(dd$ddd_confi)]
if(any(ddd_confi<0)){
der3_correct_part <- ddd_confi[c(which(ddd_confi < 0)[1]:length(ddd_confi))]
}else{
der3_correct_part = ddd_confi
}
der3_correct_part_woNA <- der3_correct_part[!is.na(der3_correct_part)]
which(ddd_confi == max(der3_correct_part_woNA))
dx_inflection_index <- which(ddd_confi == max(der3_correct_part_woNA)) + 1
dx_min_index <- which.min(dd$dd_confi)
res <- dd$confi_values[c(dx_min_index, dx_inflection_index)]
return( res )
}
calc_green_blue_poins(data2plot_list[[1]])
load("breObj_list.Rdata")
data2plot_list <- lapply(breObj_list, FUN = function(breObj){
cat("=\n")
generate_data4plot(breObj)
})
when_to_stop <- function(xx){
#xx <- data2plot_list[[257]]
#reference_conf_segment <- which(xx$confi_values < 0.9 & xx$confi_values>0.8)
ref_start <- which.min(abs(xx$confi_values-0.8))
ref_stop <- which.min(abs(xx$confi_values-0.9))
if(ref_start==ref_stop & ref_start > 2){
ref_stop = ref_start
ref_start = ref_start-2
}
reference_conf_segment = seq(ref_start, ref_stop)
# if(length(reference_conf_segment)<2)
# {
#     reference_conf_segment <-  which(xx$confi_values < 0.9 & xx$confi_values>0.7)
# }
yy <- xx[reference_conf_segment,]
current_step <- yy$n_breedings_interval[2] - yy$n_breedings_interval[1]
reference_slope <- (yy$confi_values[nrow(yy)] - yy$confi_values[1])/(yy$n_breedings_interval[nrow(yy)] - yy$n_breedings_interval[1])*current_step
stop_conf <- round(xx[which(xx$d_confi < reference_slope/2 & xx$confi_values > xx$confi_values[reference_conf_segment[1]] ),"confi_values"][1],2)
res <- c(xx$confi_values[c(ref_start, ref_stop)], stop_conf)
return(res)
}
stopDF <- data.frame(do.call("rbind", lapply(data2plot_list, when_to_stop)))
colnames(stopDF) <- c("start_ref_c", "end_ref_c", "conf_stop")
dd <- data2plot_list[[309]]
plot(dd$n_breedings_interval, dd$confi_values,
#col = dot_colors,
main = "3rd derivative")
table(is.na(tt))
debug(when_to_stop)
when_to_stop(data2plot_list[[259]])
when_to_stop <- function(xx){
#xx <- data2plot_list[[257]]
#reference_conf_segment <- which(xx$confi_values < 0.9 & xx$confi_values>0.8)
ref_start <- which.min(abs(xx$confi_values-0.8))
ref_stop <- which.min(abs(xx$confi_values-0.9))
if(ref_start==ref_stop & ref_start > 2){
ref_stop = ref_start
ref_start = ref_start-2
}
reference_conf_segment = seq(ref_start, ref_stop)
# if(length(reference_conf_segment)<2)
# {
#     reference_conf_segment <-  which(xx$confi_values < 0.9 & xx$confi_values>0.7)
# }
yy <- xx[reference_conf_segment,]
current_step <- yy$n_breedings_interval[2] - yy$n_breedings_interval[1]
reference_slope <- (yy$confi_values[nrow(yy)] - yy$confi_values[1])/(yy$n_breedings_interval[nrow(yy)] - yy$n_breedings_interval[1])*current_step
stop_conf <- round(xx[which(xx$d_confi < reference_slope/2 & xx$confi_values > xx$confi_values[reference_conf_segment[1]] ),"confi_values"][1],2)
res <- c(xx$confi_values[c(ref_start, ref_stop)], stop_conf)
return(res)
}
stopDF <- data.frame(do.call("rbind", lapply(data2plot_list, when_to_stop)))
colnames(stopDF) <- c("start_ref_c", "end_ref_c", "conf_stop")
dd <- data2plot_list[[309]]
plot(dd$n_breedings_interval, dd$confi_values,
#col = dot_colors,
main = "3rd derivative")
table(is.na(tt))
#debug(when_to_stop)
when_to_stop(data2plot_list[[259]])
aggreDF <- data.frame(cbind(starting_params, stopDF))
View(aggreDF)
plot(aggreDF$litter_size*aggreDF$fertility, aggreDF$conf_stop)
when_to_stop <- function(xx){
#xx <- data2plot_list[[257]]
#reference_conf_segment <- which(xx$confi_values < 0.9 & xx$confi_values>0.8)
ref_start <- which.min(abs(xx$confi_values-0.8))
ref_stop <- which.min(abs(xx$confi_values-0.9))
if(ref_start==ref_stop & ref_start > 2){
ref_stop = ref_start
ref_start = ref_start-2
}
reference_conf_segment = seq(ref_start, ref_stop)
# if(length(reference_conf_segment)<2)
# {
#     reference_conf_segment <-  which(xx$confi_values < 0.9 & xx$confi_values>0.7)
# }
yy <- xx[reference_conf_segment,]
current_step <- yy$n_breedings_interval[2] - yy$n_breedings_interval[1]
reference_slope <- (yy$confi_values[nrow(yy)] - yy$confi_values[1])/(yy$n_breedings_interval[nrow(yy)] - yy$n_breedings_interval[1])*current_step
stop_conf <- round(xx[which(xx$d_confi < reference_slope/2 & xx$confi_values > xx$confi_values[reference_conf_segment[1]] ),"confi_values"][1],2)
res <- c(xx$confi_values[c(ref_start, ref_stop)], stop_conf)
return(res)
}
stopDF <- data.frame(do.call("rbind", lapply(data2plot_list, when_to_stop)))
colnames(stopDF) <- c("start_ref_c", "end_ref_c", "conf_stop")
dd <- data2plot_list[[309]]
plot(dd$n_breedings_interval, dd$confi_values,
#col = dot_colors,
main = "3rd derivative")
table(is.na(tt))
lll <- lapply(data2plot_list, FUN=function(xx){
if(any(xx$confi_values < 0.5)){
return(xx)
}else{
return(NA)
}
})
xx <- lll[[200]]
lll <- data2plot_list[which(!is.na(lll))]
maxes <- sapply(lll, FUN = function(xx){
all_less_05 <- which(xx$confi_values < 0.5)
last_less_05 <- all_less_05[length(all_less_05)]
first_more_051 <- which(xx$confi_values > 0.51)[1]
max_allowed_addition <- 2*(xx$n_breedings_interval[first_more_051] - xx$n_breedings_interval[last_less_05])
xx$n_breedings_interval[which(xx$d_confi < 0.01)[1]]
res <- xx$confi_values[which(xx$d_confi < 0.01 & xx$confi_values > 0.5)[1]]
return(res)
})
hist(maxes, breaks=30)
lll[[140]]
maxes[140]
aa <- sapply(data2plot_list, FUN = function(xx){
res <- xx$confi_values[which(xx$d_confi < 0.01 & xx$confi_values > 0.5)[1]]
})
hist(aa, breaks = 30, main = "Histogram of the maximal recommended confidence", xlab = "confidence")
fig1 <- plot_ly(
type='histogram',
x=~round(aa,3),colors = "gray",
bingroup=0.1,
marker = list(color="grey"))
fig1 <- fig1 %>% layout(
barmode="overlay",
bargap=0.1)
fig1
aa <- sapply(data2plot_list, FUN = function(xx){
res <- xx$confi_values[which(xx$d_confi < 0.01 & xx$confi_values > 0.5)[1]]
})
hist(aa, breaks = 30, main = "Histogram of the maximal recommended confidence", xlab = "confidence")
fig1 <- plot_ly(
type='histogram',
x=~round(aa,3),colors = "gray",
bingroup=0.1,
marker = list(color="grey"))
install.packages("plotly")
fig1 <- fig1 %>% layout(
barmode="overlay",
bargap=0.1)
library(plotly)
fig1 <- plot_ly(
type='histogram',
x=~round(aa,3),colors = "gray",
bingroup=0.1,
marker = list(color="grey"))
fig1
fig1 <- plot_ly(
type='histogram',
x=~round(aa,3),colors = "gray",
bingroup=0.1,
marker = list(color="grey"))
fig1 <- fig1 %>% layout(
barmode="overlay",
bargap=0.1)
fig1
p6 <- plot_ly(
type = "histogram",
x = ~round(aa,3), zeroline = FALSE,
marker = list(color = "rgb(245, 140, 5)",
line = list(color = "white",
width = 1.5))) %>%
layout(title = "One additional mating yields 1% confidence increase or more",
yaxis = list(title = ""),
xaxis = list(title = "Maximal Confidence",
zeroline = FALSE))
p6
fig2 <-plot_ly(data = tmp,
x=~fertility*tmp$litter_size*geno_p,
y=~ref80/ref95,
color=~ref80/ref95,
marker = list(
size = 15,
line = list(
color = 'black',
width = 1, zeroline = FALSE
)
))
fig2
fig2 <-plot_ly(data = tmp,
x=~fertility*tmp$litter_size*geno_p,
y=~ref80/ref95,
color=~ref80/ref95,
marker = list(
size = 15,
line = list(
color = 'black',
width = 1, zeroline = FALSE
)
))
tmp <- subset(aggreDF, fertility > 0.3 & litter_size < 10 & geno_p < 0.8)
aggreDF <- data.frame(cbind(starting_params, stopDF))
litter_size_range <- seq(3,15,1)
fertility_range <- c(seq(0.5, 0.9, 0.1), 0.95)
genotype_p_range <- c(0.1, 0.25, 0.5, 0.75, 1)
starting_params <- expand.grid(
litter_size_range,
fertility_range,
genotype_p_range)
colnames(starting_params) <- c("litter_size", "fertility", "geno_p")
dim(starting_params)
aggreDF <- data.frame(cbind(starting_params, stopDF))
tmp <- subset(aggreDF, fertility > 0.3 & litter_size < 10 & geno_p < 0.8)
tmp <- aggreDF
plot_ly(data = tmp,
x=~fertility*tmp$litter_size,
y=~geno_p,
z=~ref80/ref95,
type="scatter3d", mode="markers", color=~ref80/ref95
) %>% layout(
title = 'Automatic Labels Based on Data Frame Column Names')
fig1 <- plot_ly(
type='histogram',
x=~round(aa,3),colors = "gray",
bingroup=0.1,
marker = list(color="grey"))
fig1 <- fig1 %>% layout(
barmode="overlay",
bargap=0.1)
fig1
p6 <- plot_ly(
type = "histogram",
x = ~round(aa,3), zeroline = FALSE,
marker = list(color = "rgb(245, 140, 5)",
line = list(color = "white",
width = 1.5))) %>%
layout(title = "One additional mating yields 1% confidence increase or more",
yaxis = list(title = ""),
xaxis = list(title = "Maximal Confidence",
zeroline = FALSE))
p6
fig2 <-plot_ly(data = tmp,
x=~fertility*tmp$litter_size*geno_p,
y=~ref80/ref95,
color=~ref80/ref95,
marker = list(
size = 15,
line = list(
color = 'black',
width = 1, zeroline = FALSE
)
))
fig2
fig <- subplot(fig3, subplot( fig2, p6,  margin = 0.1, nrows = 2, heights = c(0.7, 0.3)), margin = 0.03, nrows = 1) %>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
dd <- data2plot_list[[120]]
plot(dd$n_breedings_interval, dd$confi_values,
#col = dot_colors,
main = "Confidence",
)
segments(25, 0.7994748, 25, 0.8450112, col= 'blue')
segments(30, 0.95, 30, 0.9664799, col= 'red')
abline(h=0.80, col="blue", type="l", lty=2)
abline(h=0.95, col = "red", type="l", lty=2)
fig3 <-plot_ly(data = dd,
x=~n_breedings_interval,
y=~confi_values,
color='black',
marker = list(
size = 8,
color='grey',
line = list(
color = 'black',
width = 1
)
)) #%%>% add_segments(x=25, xend=25, y=0.7994748, yend=0.8450112)
fig <- subplot(fig3, subplot( fig2, p6,  margin = 0.1, nrows = 2, heights = c(0.7, 0.3)), margin = 0.03, nrows = 1) %>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
when_to_stop_2 <- function(xx){
ref80 <- which.min(abs(xx$confi_values-0.8))
ref90 <- which.min(abs(xx$confi_values-0.90))
ref95 <- which.min(abs(xx$confi_values-0.95))
conf_increase <- xx[c(ref80, ref90, ref95),"d_confi"] # from an additional mating (or whichever step we took)
return(conf_increase)
}
stopDF2 <- data.frame(do.call("rbind", lapply(data2plot_list, when_to_stop_2)))
colnames(stopDF2) <- c("ref80", "ref90", "ref95")
hist(stopDF2$X2/stopDF2$X3, breaks = 30)
aggreDF <- data.frame(cbind(starting_params, stopDF2))
v <- ggplot(subset(aggreDF, litter_size %in% seq(3,10)),
aes(y=round(fertility, 2), x=round(geno_p,4), z = ref80/ref95))
v + geom_contour_filled()
library("plot3D")
library(latticeExtra)
scatter3D(x=aggreDF$fertility, y=aggreDF$fertility, z=aggreDF$ref80/aggreDF$ref95,
col = (aggreDF$geno_p),
clab = c("Sepal", "Width (cm)"))
library(plotly)
tmp <- subset(aggreDF, fertility > 0.3 & litter_size < 10 & geno_p < 0.8)
tmp <- aggreDF
plot_ly(data = tmp,
x=~fertility*tmp$litter_size,
y=~geno_p,
z=~ref80/ref95,
type="scatter3d", mode="markers", color=~ref80/ref95
) %>% layout(
title = 'Automatic Labels Based on Data Frame Column Names')
closest05 <- which(xx$confi_values>0.5)[1]
if(closest05!=1){
}
lll <- lapply(data2plot_list, FUN=function(xx){
if(any(xx$confi_values < 0.5)){
return(xx)
}else{
return(NA)
}
})
xx <- lll[[200]]
lll <- data2plot_list[which(!is.na(lll))]
maxes <- sapply(lll, FUN = function(xx){
all_less_05 <- which(xx$confi_values < 0.5)
last_less_05 <- all_less_05[length(all_less_05)]
first_more_051 <- which(xx$confi_values > 0.51)[1]
max_allowed_addition <- 2*(xx$n_breedings_interval[first_more_051] - xx$n_breedings_interval[last_less_05])
xx$n_breedings_interval[which(xx$d_confi < 0.01)[1]]
res <- xx$confi_values[which(xx$d_confi < 0.01 & xx$confi_values > 0.5)[1]]
return(res)
})
hist(maxes, breaks=30)
lll[[140]]
maxes[140]
aa <- sapply(data2plot_list, FUN = function(xx){
res <- xx$confi_values[which(xx$d_confi < 0.01 & xx$confi_values > 0.5)[1]]
})
hist(aa, breaks = 30, main = "Histogram of the maximal recommended confidence", xlab = "confidence")
library(plotly)
fig1 <- plot_ly(
type='histogram',
x=~round(aa,3),colors = "gray",
bingroup=0.1,
marker = list(color="grey"))
fig1 <- fig1 %>% layout(
barmode="overlay",
bargap=0.1)
fig1
p6 <- plot_ly(
type = "histogram",
x = ~round(aa,3), zeroline = FALSE,
marker = list(color = "rgb(245, 140, 5)",
line = list(color = "white",
width = 1.5))) %>%
layout(title = "One additional mating yields 1% confidence increase or more",
yaxis = list(title = ""),
xaxis = list(title = "Maximal Confidence",
zeroline = FALSE))
p6
fig2 <-plot_ly(data = tmp,
x=~fertility*tmp$litter_size*geno_p,
y=~ref80/ref95,
color=~ref80/ref95,
marker = list(
size = 15,
line = list(
color = 'black',
width = 1, zeroline = FALSE
)
))
fig2
fig <- subplot(fig3, subplot( fig2, p6,  margin = 0.1, nrows = 2, heights = c(0.7, 0.3)), margin = 0.03, nrows = 1) %>%
layout(plot_bgcolor='#e5ecf6',
xaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'))
fig
